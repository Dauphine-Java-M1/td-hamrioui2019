


==================================================TD1==============================================


Pour ce td on cré un nouveau projet maven dans le repertoire javaavance
pour cela on va rappeller brievement les étapes à suivre:
	- on cré projet maven avec la commande : mvn archetype:generate -D archetypeArtifactId=maven-archetype-quickstart, on donne les propriétés du package et du groupeID comme dans le td00 sauf que ici on mets shapes au lieu de td00 
	- on modifie ensuite le fichier pom.xml en ajoutant les propriétés de version et celles demandés dans le td00 
	- on va créer une archive .jar avec la commande mvn package 
	- on compile tout cela avec mvn compile et on commence
	- on suit ensuite les étapes de al création de l'archive .jar et on importe le projet maven sur eclipse


au niveau de la transmission des fichiers sur github, on fait : 
git push origin master 
git pull origin master 
git add lechemindufichier


###########################################    Exo1:   ##############################################


	1- on cré une classe Point avec deux champs privés x et y. 

	 - les deux ligne fonctionne bien car ici on utilise le constructeur par défaut qui nous permet d'instancier l'objet point p et d'accéder au deux champs x et y et nous les affiche : 0 0 car il donne des valeur par défaut.

	2- on cré une classe TestPoint on utilise le meme code que dans la classe Point, ici ça ne marche pas car on ne peux pas accéder au champs privés d'une autre classe directement avec p.x et p.y.
	Pour y remedier on cré des methodes guetteur dans la classe Point qui vont récupérer la valeur et en faisant appel a ces guetteur on accede ainsi a la valeur comme ceci:
			
	<<<< System.out.println(p.getX()+" "+p.getY());   >>>

	3- Pourquoi il faut toujours que les champs d’une classe soient privés? principe de l'encapsulation :) 

	4- accesseur = getter, 
	les accesseur sont des fonctions qui te permettent de récupérer la valeur d'une variable declarée "private" dans la meme classe.
	Dans notre cas en utilisant la classe TestPoint oui on doit l'utiliser pour acceder aux champs privés de la classe Point

	5- on cré un constructeur parametré par px et py, le probleme est quand on cré un constructeur parametré celui ci ecrase le constructeur par défaut donc on ne peut plus utiliser le constructeur par défaut. 

	6- modification des parametre OK

	7- Pour connaitre à tout moment le nombre de point créé, on déclare un compteur cpt qu'on initialise à 0 on va l'incrémenter à chaque fois qu'on appelle au constructeur, on va créer une méthode qui getNombreInstance() qui retourne le compteur. Il suffira d'appeller a cette fonction avec System.out.print(Point.getNombreInstance()); 
    
 	8- 
	public Point(Point a)
	     {
		x = a.x;
		y = a.y;
	     }
	comment le compilateur sait quel constructeur utiliser? il va tout simplement voir le type des parametre : si c'est un point il va utiliser le constructeur avec point comme parametre si on lui donne deux valeurs il utilisera le premier avec comme parametre x et y 


	9- il suffit de faire: System.out.println("("+p.x+","+p.y+")");


###########################################    Exo2:   ##############################################

	1- le code affiche : 
		true
		false
	Alors p1==p2 car on a affecté l'objet créé p1 a l'objet p2 il considère que c'est le meme objet par contre p1==p3 est faux car il considére que p1 et p3 sont deux objets distincts malgrés les valeurs équivalentes des coordonnées    


	2- 
	public static boolean isSameAs(Point a, Point b) {
		return a.equals(b);
	}

	3- en premier il faut bien pressicer le type que prend la arraylist en l'occurence Point 
	   IndexOf elle prend l'element à rechercher dans la liste, elle affiche 0 si l'element est dans la list, -1 sinon ici on n'a pas encore ajouté p3 donc c'est normal qu'il nous affiche -1

	-------modifier la classe Point pour résoudre le probleme: il suffit d'ajouter p3 dans la liste


###########################################    EXO 3 ################################################

	1- 
	on va construire un Constructeur de la classe prenant 2 param un tableau de point et la taille de celui ci:
	2- 
	implémenter la méthode add qui ajoute un point à la ligne brisée. 
	private void add(Point a) {
		 /*on récupére la taille du tableau afin d'ajouter le point a la fin */
		 int taille = ligneBrisee.length;
		 ligneBrisee[taille]=a;// on l'ajoute à la fin du tab 
	}

	si on ajoute pas de condition cela nous affiche une erreur:  Index  out of bounds for length

	on doit donc tester si on n'a pas atteint la limite.
	donc on ajoute un attribut taille(qui est le nbr de point de la ligne) qu'on initialise à 0 dans le constructeur. a chaque appelle de ADD on l incrémente et on test si cette taille n'est pas > au max fixé qui est n 

 voici ce que ça donne : 
		 /*methode qui ajoute un  point dans une ligne */
	 private void add(Point a) {
		 taille= taille+1;
		 if(taille <= n) {
			 ligneBrisee[taille]=a;
			 System.out.println("Vous avez reussi à ajouter ");
			
		 }
		 else {
			 System.out.println("VOSU AVEZ DEPASSER LA TAILLE ");
		 }	 
	 }
 	 
	3- 
	la fonction contains : 
	private boolean contains(Point a) {
		 for (Point point : ligneBrisee) {
			if(point.equals(a)) {
				return true;
			}
		}
		return false;
	 }

	4-
	en passant, null en argument, cela génère une exception de type NullPointException 
	si on met null en argument de add cela la taille du tab.
	On va modifier la classe de tel sorte a utiliser une LinkedList au lieu d'un tableau
	les fonctions ne servent plus a rien vu qu'il n y a plus de capacité 

###########################################    EXO 4 ################################################


	1-
	on peut imaginer plusieur signature, elle va prendre en paramettre : un point, et les deux coordonnee de translation : 
	static Point translate (Point a, int dx, int dy)
	     {
		Point p = new Point ();
		p.x = a.x + dx;
		p.y= a.y + dy;
		return p;
	     }

	2-
	creation de la classe cercle: cette classe définit un cercle ayant comme centre un point centre, et un rayon de type double

	3-
	public String toString() {
		return "c est un cercle de centre "+this.centre.afficher()+" et de rayon "+this.rayon;
	}
	j'ai ajouter la méthode afficher() dans la classe point afin qu elle m affiche les coordonnées proprement.

	4- 
	methode translate: du cercle 
	static Cercle translate (Cercle c, int dx, int dy)
	    {
	       Cercle c1 = new Cercle ();
	       int x=c.centre.getX() + dx;
	       int y=c.centre.getY() + dy;
	       c1.centre.setX(x);
	       c1.centre.setY(y);
	       return c1;
	    }
	meme principe que pour le point. on va cependant modifier les coordonnées en utilisant les setteur de la classe point sur le centre le rayon ne change pas.

	5-

	le probleme est le nom de la classe ici c'est circle or nous avons définit notre classe sous le nom de cercle donc il faut bien respecter le nom de la classe.



--------------------refaire cette partie et translate -------------------------
	
	

 REMARQUE :sur eclipse=> pour générer des getteur et setteur, il suffit d'aller source et generate
